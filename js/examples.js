var mi_objeto = {};MiObjeto=_.extend(mi_objeto, Backbone.Events); // Con la funcion bind podemos enlazar un evento cualquiera con una// función callback que se ejecutará cuando este evento ocurra en este objetomi_objeto.bind("un_evento", function(msg){    alert('Vaya, ha ocurrido un_evento con mensaje' + msg);}); // Un objeto puede disparar un evento en el momento que desee// utilizando la función triggermi_objeto.trigger('un_evento','de_ejemplo');//CREACIÓN DE UN MODELOvar Modelo = Backbone.Model.extend({    propiedadDeInstancia: "Valor de instancia"},{    propiedadDeClase: "Valor de clase"});var modelo = new Modelo();var Cliente = Backbone.Model.extend({	defaults: {		empresa: 'sin nombre',		telefonos: []	},	nuevoTelefono: function(n_telefono){		var telefonos_array = this.get("telefonos");		telefonos_array.push(n_telefono);		this.set({telefonos:telefonos_array});	}});var cliente = new Cliente({name: 'Alfonso Marin', company:'Universidad de murcia', telefonos:['968000000']});cliente.bind('change',function(target, options){    alert('Ha saltado el evento change del modelo ' + JSON.stringify(this.changedAttributes()));}); cliente.bind('change:name', function(target, valor, options){   var old = this.previousAttributes().name;   alert('Modificado nombre a ' + valor + '. Antiguo valor:' + old);});cliente.nuevoTelefono('687000000');var telefonos = cliente.get('telefonos'); // ['968000000', '687000000']//alert( cliente.get('name') );//alert( cliente.get('telefonos') );cliente.set ({name:'David'});var Clientes = Backbone.Collection.extend({	model: Cliente,	comparator: function(cliente){        // ordenamos por el atributo nombre        return cliente.name;    }});var clientes = new Clientes();clientes.add([{name:'Alfonso', apellidos:'Marín'},               {name:'Javier', apellidos:'Serrano'},               {name:'David', apellidos:'Piedra'},               {name:'Antonio', apellidos:'Garcia'}]);// filter: itera sobre el array o hash pasando los elementos a una función callback// Devuelve un array o hash con los elementos que hayan devuelto 'true' en la función callbackvar clientes_jubilados = _.find(clientes.models, function(cliente){ return cliente.edad == 65 });var clientes_nombre = _.find(clientes.models, function(cliente){ return cliente.name != '' });alert( clientes.at(1).get('name') );/*FichaCliente = Backbone.View.extend({    template: _.template($('#ficha_template').html()),    render: function(){        $(this.el).html(this.template(this.model.toJSON()));        return this;    }});var cliente = new Cliente({nombre:'Alfonso', apellidos:'Marín Marín'});var ficha = new FichaCliente({el:$('body'), model: cliente});ficha.render();*/Enrutador = Backbone.Router.extend({    routes:{                                     // Ejemplos de coincidencias:        ""                  : "index",        "help"              : "ayuda",          // #help        "tag/:tagid"        : "muestraEtiqueta",  // #tag/perro        "tag/:tagid/p:page" : "muestraEtiqueta",  // #tag/perro/p5        "download/*file"     : "descargar"        // #download/path/to/file.txt },    index: function() { /* ... */ },    ayuda: function(){ /* ... */ },    muestraEtiqueta: function(tagid, page){ /* ... */ },    descargar: function(file){ /* ... */ } });Backbone.history.start();